# -*- coding: utf-8 -*-

import numpy as np
from tqdm import tqdm
from keras.models import load_model
from keras.models import Sequential
import ember
from sklearn.preprocessing import StandardScaler
import lightgbm as lgb

model = load_model("sigmoid.h5")
model.summary()

X_test, y_test = ember.read_vectorized_features("D:/ml_projects/datasets/ember","test")
scaler = StandardScaler()
X_test_scaled = scaler.fit_transform(X_test)

y_pred_keras = model.predict(X_test_scaled).ravel()

from sklearn.metrics import roc_curve, auc
fpr, tpr, threshold = roc_curve (y_test, y_pred_keras)
auc = auc(fpr,tpr)




import matplotlib.pyplot as plt
plt.figure(1)
#plt.plot([0, 1], [0, 1], 'k--')
line = plt.plot(fpr, tpr, label='Prediction (AUC = {:.3f})'.format(auc))
yvalues = line[0].get_ydata()
xvalues = line[0].get_xdata()
idx = np.abs(xvalues - 0.01).argmin()
plt.text(0.25,0.5,"TP @ 1% FP = {}".format(yvalues[idx]))
plt.xlabel('False positive rate')
plt.ylabel('True positive rate')
plt.title('ROC curve')
plt.legend(loc='best')
plt.show()

plt.figure(2)
plt.xlim(0, 0.1)
plt.ylim(0.9, 1)
plt.plot([0, 1], [0, 1], 'k--')
plt.plot(fpr, tpr, label='Prediction (AUC = {:.3f})'.format(auc))
plt.xlabel('False positive rate')
plt.ylabel('True positive rate')
plt.title('ROC curve (zoomed in at top left)')
plt.legend(loc='best')
plt.show()
