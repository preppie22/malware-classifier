# -*- coding: utf-8 -*-
"""
Created on Thu Mar 14 19:35:04 2019

@author: Piyush
"""

import ember
import numpy as np
from tqdm import tqdm
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout
from keras import optimizers
from sklearn.preprocessing import StandardScaler

X_train, y_train, X_test, y_test = ember.read_vectorized_features("D:/ml_projects/datasets/ember")
train_rows = (y_train != -1)
X = X_train[train_rows]
Y = y_train[train_rows]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_test_scaled = scaler.fit_transform(X_test)



model = Sequential()
model.add(Dense(2400, activation='relu', input_dim=2351))
model.add(Dropout(0.5))
model.add(Dense(1200, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1200, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

#sgd = optimizers.SGD(lr=0.1, decay=1e-9, momentum=0.9, nesterov=True)
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

model.fit(x=X_scaled, y=Y, batch_size=128, epochs=20, verbose=1, shuffle=True, validation_split = 0.01)
score = model.evaluate(x=X_test_scaled, y=y_test, batch_size=32, verbose=1)